--- openssh-6.6p1.orig/auth-pam.c	2016-06-30 00:05:23.377135663 -0700
+++ openssh-6.6p1/auth-pam.c	2016-06-30 10:09:16.865807810 -0700
@@ -778,12 +778,11 @@
 				    strlen(**prompts));
 				free(**prompts);
 				**prompts = NULL;
 			}
 			if (type == PAM_SUCCESS) {
-				if (!sshpam_authctxt->valid ||
-				    (sshpam_authctxt->pw->pw_uid == 0 &&
+				if ((sshpam_authctxt->pw->pw_uid == 0 &&
 				    options.permit_root_login != PERMIT_YES))
 					fatal("Internal error: PAM auth "
 					    "succeeded when it should have "
 					    "failed");
 				import_environments(&buffer);
@@ -829,13 +828,12 @@
 	if (num != 1) {
 		error("PAM: expected one response, got %u", num);
 		return (-1);
 	}
 	buffer_init(&buffer);
-	if (sshpam_authctxt->valid &&
-	    (sshpam_authctxt->pw->pw_uid != 0 ||
-	    options.permit_root_login == PERMIT_YES))
+	if (sshpam_authctxt->pw->pw_uid != 0 ||
+	    options.permit_root_login == PERMIT_YES)
 		buffer_put_cstring(&buffer, *resp);
 	else
 		buffer_put_cstring(&buffer, badpw);
 	if (ssh_msg_send(ctxt->pam_psock, PAM_AUTHTOK, &buffer) == -1) {
 		buffer_free(&buffer);
@@ -1191,25 +1189,49 @@
 	/*
 	 * If the user logging in is invalid, or is root but is not permitted
 	 * by PermitRootLogin, use an invalid password to prevent leaking
 	 * information via timing (eg if the PAM config has a delay on fail).
 	 */
-	if (!authctxt->valid || (authctxt->pw->pw_uid == 0 &&
-	    options.permit_root_login != PERMIT_YES))
+	if (authctxt->pw->pw_uid == 0 &&
+	    options.permit_root_login != PERMIT_YES)
 		sshpam_password = badpw;
 
 	sshpam_err = pam_set_item(sshpam_handle, PAM_CONV,
 	    (const void *)&passwd_conv);
 	if (sshpam_err != PAM_SUCCESS)
 		fatal("PAM: %s: failed to set PAM_CONV: %s", __func__,
 		    pam_strerror(sshpam_handle, sshpam_err));
 
 	sshpam_err = pam_authenticate(sshpam_handle, flags);
 	sshpam_password = NULL;
-	if (sshpam_err == PAM_SUCCESS && authctxt->valid) {
+	if (sshpam_err == PAM_SUCCESS) {
+		struct passwd *fpw, *pw;
 		debug("PAM: password authentication accepted for %.100s",
 		    authctxt->user);
+
+		/*
+		 * At this point re-probe user that was not found earlier
+		 * if this is fakepw().
+		 */
+		fpw = fakepw();
+		pw = authctxt->pw;
+		if (!authctxt->valid &&
+		    strcmp(pw->pw_name, fpw->pw_name) == 0 &&
+		    strcmp(pw->pw_gecos, fpw->pw_gecos) == 0 &&
+		    strcmp(pw->pw_shell, fpw->pw_shell) == 0) {
+			debug("Re-attempting user check");
+			pw = getpwnamallow(authctxt->user);
+			if (pw == NULL) {
+				debug("User %s not found even after PAM auth.",
+				    authctxt->user);
+				return 0;
+			} else {
+				authctxt->pw = pw;
+				authctxt->valid = 1;
+				debug("User record valid after authentication");
+			}
+		}
 		return 1;
 	} else {
 		debug("PAM: password authentication failed for %.100s: %s",
 		    authctxt->valid ? authctxt->user : "an illegal user",
 		    pam_strerror(sshpam_handle, sshpam_err));
--- openssh-6.6p1.orig/auth-passwd.c	2016-06-30 00:05:32.632988261 -0700
+++ openssh-6.6p1/auth-passwd.c	2016-06-30 08:25:16.851040346 -0700
@@ -79,11 +79,11 @@
  */
 int
 auth_password(Authctxt *authctxt, const char *password)
 {
 	struct passwd * pw = authctxt->pw;
-	int result, ok = authctxt->valid;
+	int result, ok = 1;
 #if defined(USE_SHADOW) && defined(HAS_SHADOW_EXPIRE)
 	static int expire_checked = 0;
 #endif
 
 #ifndef HAVE_CYGWIN
@@ -95,25 +95,28 @@
 
 #ifdef KRB5
 	if (options.kerberos_authentication == 1) {
 		int ret = auth_krb5_password(authctxt, password);
 		if (ret == 1 || ret == 0)
-			return ret && ok;
+			return ret && ok && authctxt->valid;
 		/* Fall back to ordinary passwd authentication. */
 	}
 #endif
 #ifdef HAVE_CYGWIN
 	{
 		HANDLE hToken = cygwin_logon_user(pw, password);
 
 		if (hToken == INVALID_HANDLE_VALUE)
 			return 0;
 		cygwin_set_impersonation_token(hToken);
-		return ok;
+		return ok && authctxt->valid;
 	}
 #endif
 #ifdef USE_PAM
+	/*
+	 * Ignore authctxt->valid for PAM. We will re-probe user.
+	 */
 	if (options.use_pam)
 		return (sshpam_auth_passwd(authctxt, password) && ok);
 #endif
 #if defined(USE_SHADOW) && defined(HAS_SHADOW_EXPIRE)
 	if (!expire_checked) {
@@ -123,11 +126,11 @@
 	}
 #endif
 	result = sys_auth_passwd(authctxt, password);
 	if (authctxt->force_pwchange)
 		disable_forwarding();
-	return (result && ok);
+	return (result && ok && authctxt->valid);
 }
 
 #ifdef BSD_AUTH
 static void
 warn_expiry(Authctxt *authctxt, auth_session_t *as)
--- openssh-6.6p1.orig/auth2.c	2016-06-30 11:24:05.386016011 -0700
+++ openssh-6.6p1/auth2.c	2016-06-30 11:28:52.929336181 -0700
@@ -301,13 +301,25 @@
     const char *submethod)
 {
 	char *methods;
 	int partial = 0;
 
-	if (!authctxt->valid && authenticated)
-		fatal("INTERNAL ERROR: authenticated invalid user %s",
-		    authctxt->user);
+	/*
+	 * The following code will normally check invalid user at this point
+	 * but we disable it. We would actually need to call getpwnam() here
+	 * to re-probe the user after PAM auth. But this is a privilege
+	 * separated child running in chroot. There is no way to probe. The
+	 * other guy is waiting for the response so we cannot just call
+	 * PRIVSEP(getpwnamallow). It confuses the protocol sequencing. So
+	 * just ignore and carry on. It does not have fatal consequences
+	 * since the user is also checked in the other process and that guy
+	 * will bail if it can't fnd the user even after successful PAM
+	 * auth.
+	 *if (!authctxt->valid && authenticated)
+	 *	fatal("INTERNAL ERROR: authenticated invalid user %s",
+	 *	    authctxt->user);
+	 */
 	if (authenticated && authctxt->postponed)
 		fatal("INTERNAL ERROR: authenticated and postponed");
 
 	/* Special handling for root */
 	if (authenticated && authctxt->pw->pw_uid == 0 &&
