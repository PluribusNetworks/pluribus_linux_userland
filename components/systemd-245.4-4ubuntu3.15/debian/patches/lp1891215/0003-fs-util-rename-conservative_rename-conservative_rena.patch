From 10195179bb663f000198543628b44ef8e51d71a7 Mon Sep 17 00:00:00 2001
From: Yu Watanabe <watanabe.yu+github@gmail.com>
Date: Wed, 20 Jan 2021 17:11:59 +0900
Subject: [PATCH] fs-util: rename conservative_rename() ->
 conservative_renameat()

And this introduces conservative_rename() which does not take dirfd.
---
 src/basic/fs-util.c                |  2 +-
 src/basic/fs-util.h                |  5 ++++-
 src/resolve/resolved-resolv-conf.c |  4 ++--
 src/test/test-fs-util.c            | 14 +++++++-------
 4 files changed, 14 insertions(+), 11 deletions(-)

--- a/src/basic/fs-util.c
+++ b/src/basic/fs-util.c
@@ -1480,7 +1480,7 @@ int open_parent(const char *path, int fl
         return fd;
 }
 
-int conservative_rename(
+int conservative_renameat(
                 int olddirfd, const char *oldpath,
                 int newdirfd, const char *newpath) {
 
--- a/src/basic/fs-util.h
+++ b/src/basic/fs-util.h
@@ -123,4 +123,7 @@ int syncfs_path(int atfd, const char *pa
 
 int open_parent(const char *path, int flags, mode_t mode);
 
-int conservative_rename(int olddirfd, const char *oldpath, int newdirfd, const char *newpath);
+int conservative_renameat(int olddirfd, const char *oldpath, int newdirfd, const char *newpath);
+static inline int conservative_rename(const char *oldpath, const char *newpath) {
+        return conservative_renameat(AT_FDCWD, oldpath, AT_FDCWD, newpath);
+}
--- a/src/test/test-fs-util.c
+++ b/src/test/test-fs-util.c
@@ -863,38 +863,38 @@ static void test_conservative_rename(voi
 
         /* Check that the hardlinked "copy" is detected */
         assert_se(link(p, q) >= 0);
-        assert_se(conservative_rename(AT_FDCWD, q, AT_FDCWD, p) == 0);
+        assert_se(conservative_renameat(AT_FDCWD, q, AT_FDCWD, p) == 0);
         assert_se(access(q, F_OK) < 0 && errno == ENOENT);
 
         /* Check that a manual copy is detected */
         assert_se(stat(p, &st) >= 0);
         assert_se(copy_file(p, q, 0, st.st_mode, 0, 0, COPY_REFLINK) >= 0);
-        assert_se(conservative_rename(AT_FDCWD, q, AT_FDCWD, p) == 0);
+        assert_se(conservative_renameat(AT_FDCWD, q, AT_FDCWD, p) == 0);
         assert_se(access(q, F_OK) < 0 && errno == ENOENT);
 
         /* Check that a manual new writeout is also detected */
         assert_se(write_string_file(q, "this is a test", WRITE_STRING_FILE_CREATE) >= 0);
-        assert_se(conservative_rename(AT_FDCWD, q, AT_FDCWD, p) == 0);
+        assert_se(conservative_renameat(AT_FDCWD, q, AT_FDCWD, p) == 0);
         assert_se(access(q, F_OK) < 0 && errno == ENOENT);
 
         /* Check that a minimally changed version is detected */
         assert_se(write_string_file(q, "this is a_test", WRITE_STRING_FILE_CREATE) >= 0);
-        assert_se(conservative_rename(AT_FDCWD, q, AT_FDCWD, p) > 0);
+        assert_se(conservative_renameat(AT_FDCWD, q, AT_FDCWD, p) > 0);
         assert_se(access(q, F_OK) < 0 && errno == ENOENT);
 
         /* Check that this really is new updated version */
         assert_se(write_string_file(q, "this is a_test", WRITE_STRING_FILE_CREATE) >= 0);
-        assert_se(conservative_rename(AT_FDCWD, q, AT_FDCWD, p) == 0);
+        assert_se(conservative_renameat(AT_FDCWD, q, AT_FDCWD, p) == 0);
         assert_se(access(q, F_OK) < 0 && errno == ENOENT);
 
         /* Make sure we detect extended files */
         assert_se(write_string_file(q, "this is a_testx", WRITE_STRING_FILE_CREATE) >= 0);
-        assert_se(conservative_rename(AT_FDCWD, q, AT_FDCWD, p) > 0);
+        assert_se(conservative_renameat(AT_FDCWD, q, AT_FDCWD, p) > 0);
         assert_se(access(q, F_OK) < 0 && errno == ENOENT);
 
         /* Make sure we detect truncated files */
         assert_se(write_string_file(q, "this is a_test", WRITE_STRING_FILE_CREATE) >= 0);
-        assert_se(conservative_rename(AT_FDCWD, q, AT_FDCWD, p) > 0);
+        assert_se(conservative_renameat(AT_FDCWD, q, AT_FDCWD, p) > 0);
         assert_se(access(q, F_OK) < 0 && errno == ENOENT);
 }
 
--- a/src/resolve/resolved-resolv-conf.c
+++ b/src/resolve/resolved-resolv-conf.c
@@ -372,7 +372,7 @@ int manager_write_resolv_conf(Manager *m
                 goto fail;
         }
 
-        r = conservative_rename(AT_FDCWD, temp_path_uplink, AT_FDCWD, PRIVATE_UPLINK_RESOLV_CONF);
+        r = conservative_rename(temp_path_uplink, PRIVATE_UPLINK_RESOLV_CONF);
         if (r < 0) {
                 log_error_errno(r, "Failed to move private resolv.conf file into place: %m");
                 goto fail;
@@ -384,7 +384,7 @@ int manager_write_resolv_conf(Manager *m
                 goto fail;
         }
 
-        r = conservative_rename(AT_FDCWD, temp_path_stub, AT_FDCWD, PRIVATE_STUB_RESOLV_CONF);
+        r = conservative_rename(temp_path_stub, PRIVATE_STUB_RESOLV_CONF);
         if (r < 0) {
                 log_error_errno(r, "Failed to move private stub-resolv.conf file into place: %m");
                 goto fail;
