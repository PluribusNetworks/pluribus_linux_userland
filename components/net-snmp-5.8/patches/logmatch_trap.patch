--- ./net-snmp-5.8/agent/mibgroup/ucd-snmp/logmatch.c	2020-02-25 01:29:18.289509938 -0800
+++ ./net-snmp-5.8/agent/mibgroup/ucd-snmp/logmatch.c	2020-02-25 02:12:49.193629120 -0800
@@ -8,6 +8,9 @@
  * distributed with the Net-SNMP package.
  */
 #include <net-snmp/net-snmp-config.h>
+#include <net-snmp/net-snmp-features.h>
+#include <net-snmp/net-snmp-includes.h>
+#include <net-snmp/agent/net-snmp-agent-includes.h>
 
 #include "logmatch.h"
 
@@ -77,6 +80,124 @@
     }
 }
 
+/*
+ * Send the trap from Logmatch module instead of mteEvent_run. Created a custom MIB Table and 
+ * Notification in PN-LOG-MIB that can be used to send the trap with custom data.
+ */
+void
+send_logmatch_trap(int iindex, char *match_name, char *log_fname, int matchcount, char *match_line)
+{
+    /*
+     * In the notification, we have to assign our notification OID to
+     * the snmpTrapOID.0 object. Here is it's definition. 
+     */
+    oid             objid_snmptrap[] = { 1, 3, 6, 1, 6, 3, 1, 1, 4, 1, 0 };
+    size_t          objid_snmptrap_len = OID_LENGTH(objid_snmptrap);
+
+	oid notification_oid[] = { 1, 3, 6, 1, 4, 1, 47269, 4, 7, 3, 1 };
+	size_t notification_oid_len = OID_LENGTH(notification_oid);
+
+	/* Trap variables for adding data to the Trap PDU */
+	char pn_logmatch_name[256];
+	char pn_log_filename[256];
+	char pn_logmatch_data[256];
+
+	snprintf(pn_logmatch_name, sizeof (pn_logmatch_name), "%s", match_name);
+	snprintf(pn_log_filename, sizeof (pn_log_filename), "%s", log_fname);
+	snprintf(pn_logmatch_data, sizeof (pn_logmatch_data), "%s", match_line);
+
+    /*
+     * define the OIDs for the varbinds we're going to include
+     *  with the notification -
+     * PN-LOG-MIB::pnLogMatchName, PN-LOG-MIB::pnLogFileName
+     * PN-LOG-MIB::pnLogMatchCount and
+     * PN-LOG-MIB::pnLogMatchData
+     */
+
+    oid      pn_logmatch_name_oid[]   = { 1, 3, 6, 1, 4, 1, 47269, 4, 7, 1, 1, 2, 0 };
+    size_t   pn_logmatch_name_oid_len = OID_LENGTH(pn_logmatch_name_oid);
+    oid      pn_log_filename_oid[]   = { 1, 3, 6, 1, 4, 1, 47269, 4, 7, 1, 1, 3, 0 };
+    size_t   pn_log_filename_oid_len = OID_LENGTH(pn_log_filename_oid);
+    oid      pn_logmatch_count_oid[]   = { 1, 3, 6, 1, 4, 1, 47269, 4, 7, 1, 1, 4, 0 };
+    size_t   pn_logmatch_count_oid_len = OID_LENGTH(pn_logmatch_count_oid);
+    oid      pn_logmatch_data_oid[]   = { 1, 3, 6, 1, 4, 1, 47269, 4, 7, 1, 1, 5, 0 };
+    size_t   pn_logmatch_data_oid_len = OID_LENGTH(pn_logmatch_data_oid);
+
+    /*
+     * here is where we store the variables to be sent in the trap 
+     */
+    netsnmp_variable_list *notification_vars = NULL;
+
+
+    /*
+     * update the instance for each variable to be sent in the trap
+     */
+    pn_logmatch_name_oid[12] = iindex;
+    pn_log_filename_oid[12] = iindex;
+    pn_logmatch_count_oid[12] = iindex;
+    pn_logmatch_data_oid[12] = iindex;
+
+    /*
+     * add in the trap definition object 
+     */
+    snmp_varlist_add_variable(&notification_vars,
+                              /*
+                               * the snmpTrapOID.0 variable 
+                               */
+                              objid_snmptrap, objid_snmptrap_len,
+                              /*
+                               * value type is an OID 
+                               */
+                              ASN_OBJECT_ID,
+                              /*
+                               * value contents is our notification OID 
+                               */
+                              (u_char *) notification_oid,
+                              /*
+                               * size in bytes = oid length * sizeof(oid) 
+                               */
+                              notification_oid_len * sizeof(oid));
+
+    /*
+     * add in the additional objects defined as part of the trap
+     */
+    snmp_varlist_add_variable(&notification_vars,
+                               pn_logmatch_name_oid, pn_logmatch_name_oid_len,
+                               ASN_OCTET_STR,
+                              (u_char *)&pn_logmatch_name,
+                                  strlen(pn_logmatch_name));
+
+    snmp_varlist_add_variable(&notification_vars,
+                               pn_log_filename_oid, pn_log_filename_oid_len,
+                               ASN_OCTET_STR,
+                              (u_char *)&pn_log_filename,
+                                  strlen(pn_log_filename));
+
+    snmp_varlist_add_variable(&notification_vars,
+                               pn_logmatch_count_oid, pn_logmatch_count_oid_len,
+                               ASN_UNSIGNED,
+                              (u_char *)&matchcount,
+                                  sizeof(matchcount));
+
+    snmp_varlist_add_variable(&notification_vars,
+                               pn_logmatch_data_oid, pn_logmatch_data_oid_len,
+                               ASN_OCTET_STR,
+                              (u_char *)&pn_logmatch_data,
+                                  strlen(pn_logmatch_data));
+
+    /*
+     * send the trap out.  This will send it to all registered
+     * receivers (see the "SETTING UP TRAP AND/OR INFORM DESTINATIONS"
+     * section of the snmpd.conf manual page. 
+     */
+    send_v2trap(notification_vars);
+
+    /*
+     * free the created notification variable list 
+     */
+    snmp_free_varbind(notification_vars);
+}
+
 struct logmatchstat {
     char            filenamePattern[256];
     char            filename[256];
@@ -121,6 +242,7 @@
     int             anyChanges = FALSE;
     struct stat     sb;
     char            lastFilename[256];
+    char            match_line[1024];
 
     /*
      * ------------------------------------ 
@@ -295,6 +417,7 @@
                     logmatchTable[iindex].currentMatchCounter++;
                     logmatchTable[iindex].matchCounter++;
                     anyChanges = TRUE;
+					strncpy(match_line, inbuf, sizeof(inbuf));
                 }
             }
 
@@ -304,6 +427,9 @@
         }
     }
 
+	if (anyChanges && TRUE) {
+			send_logmatch_trap(iindex, logmatchTable[iindex].name, logmatchTable[iindex].filename, logmatchTable[iindex].currentMatchCounter, match_line);
+	}
 
     /*
      * ------------------------------------ 
