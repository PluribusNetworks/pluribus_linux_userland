--- net-snmp-5.8/agent/mibgroup/agentx/master.c	2021-09-22 01:03:09.193794216 -0700
+++ net-snmp-5.8/agent/mibgroup/agentx/master.c	2021-09-22 00:47:31.197396027 -0700
@@ -49,13 +49,13 @@
 #include <net-snmp/agent/net-snmp-agent-includes.h>
 #include "snmpd.h"
 #include "agentx/protocol.h"
 #include "agentx/master_admin.h"
 
-netsnmp_feature_require(handler_mark_requests_as_delegated)
-netsnmp_feature_require(unix_socket_paths)
-netsnmp_feature_require(free_agent_snmp_session_by_session)
+netsnmp_feature_require(handler_mark_requests_as_delegated);
+netsnmp_feature_require(unix_socket_paths);
+netsnmp_feature_require(free_agent_snmp_session_by_session);
 
 void
 real_init_master(void)
 {
     netsnmp_session sess, *session = NULL;
@@ -219,11 +223,11 @@
         DEBUGMSGTL(("agentx/master", "response too late on session %8p\n",
                     session));
         /* response is too late, free the cache */
         if (magic)
             netsnmp_free_delegated_cache((netsnmp_delegated_cache*) magic);
-        return 0;
+        return 1;
     }
     requests = cache->requests;
 
     switch (operation) {
     case NETSNMP_CALLBACK_OP_TIMED_OUT:{
@@ -278,10 +282,15 @@
         netsnmp_set_request_error(cache->reqinfo, requests,     /* XXXWWW: should be index=0 */
                                   SNMP_ERR_GENERR);
         netsnmp_free_delegated_cache(cache);
         return 0;
 
+    case NETSNMP_CALLBACK_OP_RESEND:
+        DEBUGMSGTL(("agentx/master", "resend on session %8p req=0x%x\n",
+                    session, (unsigned)reqid));
+        return 0;
+
     case NETSNMP_CALLBACK_OP_RECEIVED_MESSAGE:
         /*
          * This session is alive 
          */
         CLEAR_SNMP_STRIKE_FLAGS(session->flags);
@@ -606,11 +615,9 @@
     DEBUGMSGTL(("agentx/master", "sending pdu (req=0x%x,trans=0x%x,sess=0x%x)\n",
                 (unsigned)pdu->reqid, (unsigned)pdu->transid, (unsigned)pdu->sessid));
     result = snmp_async_send(ax_session, pdu, agentx_got_response, cb_data);
     if (result == 0) {
         snmp_free_pdu(pdu);
-        if (cb_data)
-            netsnmp_free_delegated_cache((netsnmp_delegated_cache*) cb_data);
     }
 
     return SNMP_ERR_NOERROR;
 }
